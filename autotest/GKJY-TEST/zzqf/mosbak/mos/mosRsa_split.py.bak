#!/usr/bin/env python3

#生成秘钥
from Crypto import Random
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_v1_5 as Cipher_pkcs1_v1_5

import base64

random_generator = Random.new().read
rsa = RSA.generate(1024, random_generator)
private_pem = rsa.exportKey()

with open('private.pem','wb') as f:
    f.write(private_pem)
    public_pem = rsa.publickey().exportKey()

with open('public.pem','wb') as f:
    f.write(public_pem)

#加密数据
def encryp(message, length=117):
    with open('public1.pem','r') as f:
    #with open('public_key.pem','r') as f:
        key = f.read()
        rsakey = RSA.importKey(key)
        cipher = Cipher_pkcs1_v1_5.new(rsakey)
        if len(message) <= length:
            cipher_text = base64.b64encode(cipher.encrypt(message.encode(encoding="utf-8")))
            print(cipher_text.decode('utf-8'))
            return cipher_text.decode('utf-8')
        msglength = len(message)
        offset, res = 0, []
        while msglength - offset > 0:
        #for i in range(0, len(message), length):
            if msglength - offset > length:
                res.append(base64.b64encode(cipher.encrypt(message[offset:offset+length])).decode("utf-8"))
            else:
                res.append(base64.b64encode(cipher.encrypt(message[offset:]).decode("utf-8")))
                #res.append(cipher.encrypt(message[i:i+length].encode(encoding="utf-8")))
            offset += length
        txt = b"".join(res)
        txt = base64.b64encode(txt).decode("utf-8")
        print(txt)
        return txt

#解密数据
def decryp(message, length=117):
    with open('private.pem','r') as f:
        key = f.read()
        rsakey = RSA.importKey(key)
        cipher = Cipher_pkcs1_v1_5.new(rsakey)
        res = []
        #message = base64.b64decode(message)
        #print(message)
      #  for i in range(0, len(message), length):
      #      res.append(cipher.decrypt(message[i:i+length], "ERROR"))
        text = cipher.decrypt(base64.b64decode(message), "ERROR")
        print(text.decode('utf-8'))
        #txt = b"".join(res)
        return True

if __name__ == "__main__":
    res = encryp('1'*224)
    #decryp(res)
